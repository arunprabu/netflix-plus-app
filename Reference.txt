
npm i @angular/cli -g 

Project Dep 
  * needed for the project's functionality to run 

  npm i bootstrap
  npm i bootstrap --save 
  npm install bootstrap --save 

Dev Dep
  * needed for the project's dev workflow
  npm i webpack --save-dev 
  npm i webpack -D 
  npm i @babel/plugin-proposal-private-property-in-object -D 

=====================

React 
========
Creating React App 
  npx create-react-app my-app

Components 
============
  1. Functional Components (To learn)
      1.1 Functional component with Named Function [DONE]
      1.2 Functional component with Anonymous Function [DONE]
      1.3 Functional component with Arrow Function [DONE] [RECOMMENDED]

      * are coded with functions 
      * were called as stateless components / dumb components (before react v 16.8)
      * react introduced hooks in react v16.8. that offered support to keep state in functional components 
      * can connect to rest api using react hook 


  2. Class Components (NOT RECOMMENDED)
      * coded with class 
      * were called as stateful components / smart components / containers 
      * connecting to rest api was possible with life cycle hook methods 
    


JSX & its Limitations 
==============
  * will look like HTML --but not 
  * all tags must be closed -- either self-close or separately close 
  * class attribute should become className 


Project Structure if you are doing unit testing inside src and individual components
============
  src/
    components/
      Header/
        Header.js
        Header.css
        Header.test.js 
      Footer/
      MenuList/
    pages/  
      HomePage/
        LatestVideo/
    

Project Structure if you are doing unit testing inside src within __tests__ folder
============
  src/
    components/
      Header.js 
      Footer.js 
      MenuList.js 
    pages/
      HomePage/
        HomePage.js 
        LatestVideo.js
        TrendingVideos.js 
        TrendingVideo.js 
      AboutPage/
        AboutPage.js 
        Company.js 
    __tests__
      



Concepts 
-----
  JSX 
  Data Binding [DONE]
  Props [DONE]
  States [DONE]
  Events [DONE]
  Updating States [DONE]

  Lists and Keys [DONE]

  Sharing data between different components 

  Styles 
  Hooks 
  Rest API calls 

  Unit Testing 
  

  Lazy Loading 

===========
Naming conventions & Casing Types
----
  Casing Types 
  --------
    1. PascalCase 
        * Recommended for Object Oriented Program's classes 
        * Recommended for React Components and the folder of the components
        * also Recommended for Interface in Java & TypeScript 

        examples 
        ---
          class CarDetails {

          }

          interface Employee {

          }

    2. camelCase 
        * Recommended for variables, const, functions, methods in JS & TS 
        * Recommended for id's of html elements 
        * if your architect approves, you can have css classes in this convention

        examples 
        -----
          var myCar = 'BMW';

          function getCarInfo() {
            //....
          }
    
    3. kebab-case
        * Recommended for URLs 
        * Recommended for file names, folder names, assets in front end projects  
        * Recommended for css classes 
        * okay for id's of html elements if your architect accepts

        examples 
        -----
          btn-primary
          slideshow-container 
          youtube-logo.png 

    4. snake_case 
        * never ever use this. 
        * okay for const in JS & TS if architect accepts

        examples
        ---
          const MAX_STUDENTS_PER_CLASS = 30;


Data Binding 
---
  * keeping the data in variables in component and displaying it in comp's jsx 

Cross Component Communication 
----
  1. Parent to Child Component Communication [DONE]
      using props 
      
  2. Child to Parent Component Communication [TODO] [DONE]

  3. Any to Any Component Communication


React Hooks 
------------
  * introduced in 2019, in react v16.8.
  * help functional components have state data, and connect to back end using hooks 
  
  Rules of Hooks
  ----------
    Hooks are JavaScript functions, but they impose two additional rules:

    1. Only call Hooks at the top level. Don't call Hooks inside loops, conditions, or nested functions.
    2. Only call Hooks from React function components. 
        Don't call Hooks from regular JavaScript functions. 
        (There is just one other valid place to call Hooks â€” your own custom Hooks. We'll learn about them later.)


    useState() 
    useEffect() 
    useRef()
    useReducer()
    useContext() 
    useId() 



TO TEACH: Styles with css modules 
---




