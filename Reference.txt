
npm i @angular/cli -g 

Project Dep 
  * needed for the project's functionality to run 

  npm i bootstrap
  npm i bootstrap --save 
  npm install bootstrap --save 

Dev Dep
  * needed for the project's dev workflow
  npm i webpack --save-dev 
  npm i webpack -D 
  npm i @babel/plugin-proposal-private-property-in-object -D 

=====================

React 
========
Creating React App 
  npx create-react-app my-app

Components 
============
  1. Functional Components (To learn)
      1.1 Functional component with Named Function [DONE]
      1.2 Functional component with Anonymous Function [DONE]
      1.3 Functional component with Arrow Function [DONE] [RECOMMENDED]

      * are coded with functions 
      * were called as stateless components / dumb components (before react v 16.8)
      * react introduced hooks in react v16.8. that offered support to keep state in functional components 
      * can connect to rest api using react hook 


  2. Class Components (NOT RECOMMENDED)
      * coded with class 
      * were called as stateful components / smart components / containers 
      * connecting to rest api was possible with life cycle hook methods 
    


JSX & its Limitations 
==============
  * will look like HTML --but not 
  * all tags must be closed -- either self-close or separately close 
  * class attribute should become className 
  * style attribute should accept styles as object 



Project Structure if you are doing unit testing inside src and individual components
============
  src/
    components/
      Header/
        Header.js
        Header.css
        Header.test.js 
      Footer/
      MenuList/
    pages/  
      HomePage/
        LatestVideo/
    

Project Structure if you are doing unit testing inside src within __tests__ folder
============
  src/
    components/
      Header.js 
      Footer.js 
      MenuList.js 
    pages/
      HomePage/
        HomePage.js 
        LatestVideo.js
        TrendingVideos.js 
        TrendingVideo.js 
      AboutPage/
        AboutPage.js 
        Company.js 
    __tests__
      


Concepts 
-----
  JSX [DONE]
  Data Binding [DONE]
  Props [DONE]
  States [DONE]
  Events [DONE]
  Updating States [DONE]

  Lists and Keys [DONE]

  Sharing data between different components [DONE]
    Any to Any component Communication is pending 

  Styles [DONE]
  JSX in Depth [DONE]
  PropTypes [DONE]
  Debugging [DONE]
  Error Boundary [DONE]
  Higher Order Components [DONE]
  Render Props [TODO]
  Fragments [DONE]
  
  Hooks [4.5 hours]
    useState()    - [DONE]
    useEffect()   - [DONE]
    useRef()   [DONE]
    useReducer() [DONE]
    useContext() [DONE]
    useId()        - [TODO]
    useMemo(),   [EXPLORE]
    useCallback() [EXPLORE]
    Custom Hooks [DONE]
      Refer the following
        https://usehooks.com/
        https://react-hooks-library.vercel.app/
        https://ahooks.js.org/
        https://github.com/arunprabu/react-course-batch2-apr2023/blob/master/prime-video-app-apr2023/src/hooks/useFetch.js
        https://www.w3schools.com/react/react_customhooks.asp

  Rest API calls [DONE]

  Unit Testing [DONE]

  Performance Tuning [DONE]
  Lazy Loading [10 mins]
  Build and Deploy [10 mins]
  
  Redux [1 hour]

===========
Naming conventions & Casing Types
----
  Casing Types 
  --------
    1. PascalCase 
        * Recommended for Object Oriented Program's classes 
        * Recommended for React Components and the folder of the components
        * also Recommended for Interface in Java & TypeScript 

        examples 
        ---
          class CarDetails {

          }

          interface Employee {

          }

    2. camelCase 
        * Recommended for variables, const, functions, methods in JS & TS 
        * Recommended for id's of html elements 
        * if your architect approves, you can have css classes in this convention

        examples 
        -----
          var myCar = 'BMW';

          function getCarInfo() {
            //....
          }
    
    3. kebab-case
        * Recommended for URLs 
        * Recommended for file names, folder names, assets in front end projects  
        * Recommended for css classes 
        * okay for id's of html elements if your architect accepts

        examples 
        -----
          btn-primary
          slideshow-container 
          youtube-logo.png 

    4. snake_case 
        * never ever use this. 
        * okay for const in JS & TS if architect accepts

        examples
        ---
          const MAX_STUDENTS_PER_CLASS = 30;


Data Binding 
---
  * keeping the data in variables in component and displaying it in comp's jsx 

Cross Component Communication 
----
  1. Parent to Child Component Communication [DONE]
      using props 
      
  2. Child to Parent Component Communication [TODO] [DONE]
      using props and passing event handler to the child comp and executing 

  3. Any to Any Component Communication
      3.1 using Context API
      3.2 using redux framework (third party tool)



React Hooks 
------------
  * introduced in 2019, in react v16.8.
  * help functional components have state data, and connect to back end using hooks 
  
  Rules of Hooks
  ----------
    Hooks are JavaScript functions, but they impose two additional rules:

    1. Only call Hooks at the top level. Don't call Hooks inside loops, conditions, or nested functions.
    2. Only call Hooks from React function components. 
        Don't call Hooks from regular JavaScript functions. 
        (There is just one other valid place to call Hooks â€” your own custom Hooks. We'll learn about them later.)

    useState() 
    useEffect() 
    useRef()
    useReducer()
    useContext() 
    useId()
    useMemo(), 
    useCallback()

  Custom Hooks


Styling in React 
----
  1. Global styles [DONE]
  2. Component Specific Styles using css modules [DONE]
  3. Internal Styles [DONE]
  4. Inline Styles [DONE]
  5. Learn about styled-components [TODO]

==================
Routing in React JS 
---------

SPA (Single Page Apps)
----------------------
  7 Characteristics
  ==================
    1. Pages should not reload / refresh [DONE]
    2. URL should change [DONE]
    3. History should be maintained w/o page refresh [DONE]
    4. Header and footer should not be loaded again and again [DONE]
    5. The section in b/w header and footer should show contextual updates [DONE]
    6. Active menu should be set [TODO]
    7. Page Title should also be changed [TODO]

Let's Intergrate react-router-dom to make our app as SPA 
================
  Step 0. npm i react-router-dom 
  Step 1. Identify the Menus and the URLs 
          Home          - localhost:3000/
          About Us      - localhost:3000/about-us 
          Contact Us    - localhost:3000/contact-us 

          Let's update the URLs properly in MenuList comp 
 
  Step 2: Let's create AboutUsPage, ContactUsPage components 

  Step 3: Let's config the routes in App component. have the entire app, under
          the control of BrowserRouter of react-router-dom. 
          Then, have the routing config.

  Step 4: Check the App. URL will change. 
          Section in between header and footer will get updated. 

          Pages are still getting refreshed. Let's fix. 
          replace <a href with <Link    in MenuList comp  
  
          It's over! Now we have SPA. 

---------
Static Type Checking in ReactJS App 
------
  1. TypeScript
  2. Flow JS [NOT RECOMMENDED]
  3. PropTypes [Recommended in JS based React projects]

Debugging
-----
  Errors 
  -----
    1. Compilation Error 
    2. Runtime Error 

  ErrorBoundary 

===========

CRUD App 
User Management App
  Add User [DONE]
    localhost:3000/users/add 

  List Users [DONE]
    localhost:3000/users

  User Details [DONE]
    localhost:3000/users/1
    localhost:3000/users/2

  Update User [TODO]
    localhost:3000/users/1/update
  
  Delete User [TODO]
    localhost:3000/users/1

Forms in React
----
  1. React Hook Form (Recommended)
  2. Formik


Context API and useContext Hook 
----
  1. create context using createContext() fn 
  2. Let's provide the data thru the context to the select number of components 
  3. get the data from the desired component using useContext() Hook 


SDLC 
-----
  Requirements 
    Designs 
      Development
        Testing (QA)
          Deployment 
            Maintenance

Dev => QA => (bugs) => Dev => QA => (bugs) => Dev => QA => (bugs) => Dev => QA => (QA PASSED) => Deployment


Project Name: Calc 
------
  Resources: FRD, HLD, LLD, Designs

  Feature: add 
  -----
    Dev
    ----
      Reference: Test Cases 
      ------------
        1. add should accepts only numbers as inputs 
        2. add should produce number as output 
        3. add button should be disabled if invalid inputs are entered 

      function add(a, b) {
        if(typeof a === 'number' && typeof b === 'number'){
          return a + b;
        } 
      }

      add(10, 20); // 30

      // Tools to TEST 


Software Dev Approach 
----
  dev should prepare test cases => dev should write the dev code => (TOOLS) => SUCCESS => Deployment 


Automation Testing 
------
  0. Static Type Checking 
      Tools: TypeScript, prop-types 

  1. Unit Testing - TO LEARN 
      * Testing tiny, independent unit of our code
      * Testing the component in isolation (Without connecting to the REST API)
      * Bug Reduction Density: 40-80% 

      Tools: 
        JEST JS  - [UNIT TESTING FRAMEWORK + TEST RUNNER]
        React Testing Library (RTL) [DOM Querying Utility]

  2. Integration Testing  - NOT TO LEARN IN THIS SESSION
      * Testing components by integrating them together
      * Testing the component with REST API Calls

      Tools: 
      ----
        JEST JS (Unit Testing Framework + Test Runner)
        React Testing Library - RTL (DOM Querying Utility)

  3. End to End (E2E) Testing - NOT TO LEARN IN THIS SESSION
      * Testing the whole app as one entity.
      * Will be done by QA team members. 

      Tools: 
      ----
        * Selenium 
        * CypressJS 
        * Protractor 
        * Playwright 

----


Modern Sofware Dev Approaches 
----
  1. Test-Driven Development (TDD) -- TO LEARN 
      * Write NEW CODE only if automated test fails 

      Dev Writes Test cases => (FAILURE) => Dev Writes Functionality => (SUCCESS) => [CODE COMPLETE]
    
      Test Pattern: AAA (Arrange, Act, Assert)
      Tools: JEST JS

  2. Behaviour-Driven Development (BDD)
      * an agile s/w methodology 
      * app is documented, designed around the behavior the end user wants to experience when 
        interacting with the app. 

      Dev writes Test Cases around the behavior of the app => (FAILURE) => Dev Writes Functionality => (SUCCESS) => [CODE COMPLETE]

      Test Pattern: Given/When/Then 
      Tools: Jasmine JS 

=====
To Learn 
---
  1. How to write test cases?
  2. Where to write test cases? 
  3. How to test the app by using tools?

==========
Unit Testing 
----
  1. Testing JSX [DONE]
  2. Testing Props [DONE]
  3. Testing useState and Event [DONE]
  4. Testing Styles [DONE]
  5. Snapshot Testing [DONE]
  6. Mocks (EXPLORE)
  7. Spies (EXPLORE)
  8. Stubs (EXPLORE)
  9. Router Testing (EXPLORE)
  10. Testing Reducer (EXPLORE)
  11. Testing Context (EXPLORE)

Project Structure with folder for every component 
---------------
  src/
    components/
      Header/
        Header.js 
        Header.module.css 
        Header.test.js 
      Footer/
        Footer.js 
        Footer.module.css 
        Footer.test.js 
      MenuList/
        MenuList.js 
        MenuList.test.js 
    pages/
    contexts/
    reducers/
    hoc/
    hooks/


Project structure wihout folder for every component + with __tests__ folder 
-----------------------------------------------------
  src/
    components/
      Header.js 
      Footer.js 
      MenuList.js 
    pages/
      AboutUsPage.js 
      HomePage.js 
    contexts/
    reducers/
    hoc/
    hooks/
    __tests__/
      components/
        Header.test.js 
        Footer.test.js 
        MenuList.test.js 
      pages/
        AboutUsPage.test.js 
        HomePage.test.js 


Files Walkthru 
---------------
